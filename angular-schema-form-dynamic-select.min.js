angular.module('schemaForm').config(['schemaFormProvider','schemaFormDecoratorsProvider','sfPathProvider',function(schemaFormProvider,schemaFormDecoratorsProvider,sfPathProvider){var enumToTitleMap=function(enm){var titleMap=[];enm.forEach(function(name){titleMap.push({name:name,value:name});});return titleMap;};var select=function(name,schema,options){if((schema.type==='string')&&("enum"in schema)){var f=schemaFormProvider.stdFormObj(name,schema,options);f.key=options.path;f.type='select';if(!f.titleMap){f.titleMap=enumToTitleMap(schema['enum']);}
options.lookup[sfPathProvider.stringify(options.path)]=f;return f;}};schemaFormProvider.defaults.string.unshift(select);schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','strapselect','directives/decorators/bootstrap/strap/strapselect.html');schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','strapmultiselect','directives/decorators/bootstrap/strap/strapmultiselect.html');schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','strapselectdynamic','directives/decorators/bootstrap/strap/strapselect.html');schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','strapmultiselectdynamic','directives/decorators/bootstrap/strap/strapmultiselect.html');schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','uiselect','directives/decorators/bootstrap/uiselect/uiselect.html');schemaFormDecoratorsProvider.addMapping('bootstrapDecorator','uiselectmultiple','directives/decorators/bootstrap/uiselect/uiselectmultiple.html');}]).directive("toggleSingleModel",function(){return{require:'ngModel',restrict:"A",scope:{},replace:true,controller:['$scope',function($scope){$scope.$parent.$watch('select_model.selected',function(){if($scope.$parent.select_model.selected!=undefined){$scope.$parent.insideModel=$scope.$parent.select_model.selected.value;$scope.$parent.ngModel.$setViewValue($scope.$parent.select_model.selected.value);}});}]};}).directive('multipleOn',function(){return{link:function($scope,$element,$attrs){$scope.$watch(function(){return $element.attr('multiple-on');},function(newVal){if(newVal=="true"){var select_scope=angular.element($element).scope().$$childTail;select_scope.$isMultiple=true;select_scope.options.multiple=true;select_scope.$select.$element.addClass('select-multiple');}
else{angular.element($element).scope().$$childTail.$isMultiple=false;}});}};}).filter('whereMulti',function(){return function(items,key,values){var out=[];if(angular.isArray(values)&&items!==undefined){values.forEach(function(value){for(var i=0;i<items.length;i++){if(value==items[i][key]){out.push(items[i]);break;}}});}else{out=items;}
return out;};}).filter('propsFilter',function(){return function(items,props){var out=[];if(angular.isArray(items)){items.forEach(function(item){var itemMatches=false;var keys=Object.keys(props);for(var i=0;i<keys.length;i++){var prop=keys[i];if(item.hasOwnProperty(prop)){if(angular.isArray(item[prop])){item[prop].forEach(function(e){var text=props[prop].toLowerCase();if(e.toString().toLowerCase().indexOf(text)===0||(e.toString()).toLowerCase().indexOf(' '+text)!==-1){itemMatches=true;return;}});if(itemMatches)
break;}else{var text=props[prop].toLowerCase();if(item[prop].toString().toLowerCase().indexOf(text)===0||(item[prop].toString()).toLowerCase().indexOf(' '+text)!==-1){itemMatches=true;break;}}}}
if(itemMatches){out.push(item);}});}else{out=items;}
return out;};});angular.module('schemaForm').controller('dynamicSelectController',['$scope','$http','$timeout',function($scope,$http,$timeout){if(!$scope.form.options){$scope.form.options={};}
$scope.select_model={};$scope.form.options.scope=$scope;$scope.triggerTitleMap=function(){$scope.form.titleMap.push({"value":"345890u340598u3405u9","name":"34095u3p4ouij"})
$timeout(function(){$scope.form.titleMap.pop()})};$scope.initFiltering=function(localModel){if($scope.form.options.filterTriggers){$scope.form.options.filterTriggers.forEach(function(trigger){$scope.$parent.$watch(trigger,$scope.triggerTitleMap)});}
$scope.localModelType=Object.prototype.toString.call(localModel);$scope.filteringInitialized=true;};$scope.finalizeTitleMap=function(form,data,newOptions){form.titleMap=[];if(newOptions&&"map"in newOptions&&newOptions.map){var current_row=null,final=newOptions.map.nameProperty.length-1,separator=newOptions.map.separatorValue?newOptions.map.separatorValue:' - ';data.forEach(function(current_row){current_row["value"]=current_row[newOptions.map.valueProperty];if(typeof newOptions.map.nameProperty!='string'){var newName="";for(var i in newOptions.map.nameProperty){newName+=current_row[newOptions.map.nameProperty[i]];if(i!=final){newName+=separator};}
current_row["name"]=newName;}
else{current_row["name"]=current_row[newOptions.map.nameProperty];}
form.titleMap.push(current_row);});}
else{data.forEach(function(item){if("text"in item){item.name=item.text}});form.titleMap=data;}
if($scope.insideModel&&$scope.select_model.selected===undefined){$scope.select_model.selected=$scope.find_in_titleMap($scope.insideModel).item;}
if($scope.internalModel){$scope.uiMultiSelectInitInternalModel($scope.externalModel);}};$scope.clone=function(obj){if(null==obj||"object"!=typeof(obj))return obj;var copy=obj.constructor();for(var attr in obj){if(obj[attr]!=$scope){if(obj.hasOwnProperty(attr))copy[attr]=$scope.clone(obj[attr]);}}
return copy;};$scope.getCallback=function(callback){if(typeof(callback)=="string"){var _result=$scope.$parent.evalExpr(callback);if(typeof(_result)=="function"){return _result;}
else{throw("A callback string must match name of a function in the parent scope")}}
else if(typeof(callback)=="function"){return callback;}
else{throw("A callback must either be a string matching the name of a function in the parent scope or a "+"direct function reference")}};$scope.getOptions=function(options,search){if(options.httpPost&&options.httpPost.optionsCallback){newOptionInstance=$scope.clone(options);return $scope.getCallback(options.httpPost.optionsCallback)(newOptionInstance,search);}
if(options.httpGet&&options.httpGet.optionsCallback){newOptionInstance=$scope.clone(options);return $scope.getCallback(options.httpGet.optionsCallback)(newOptionInstance,search);}
else{return options;}};$scope.test=function(form){form.titleMap.pop();};$scope.populateTitleMap=function(form,search){if(form.schema&&"enum"in form.schema){form.titleMap=[];form.schema.enum.forEach(function(item){form.titleMap.push({"value":item,"name":item})});$scope.finalizeTitleMap(form,form.titleMap,form.options);}
else if(!form.options){}
else if(form.options.callback){form.titleMap=$scope.getCallback(form.options.callback)(form.options,search);$scope.finalizeTitleMap(form,form.titleMap,form.options);}
else if(form.options.asyncCallback){return $scope.getCallback(form.options.asyncCallback)(form.options,search).then(function(_data){_data=_data.data||_data;$scope.finalizeTitleMap(form,_data,form.options);},function(data,status){if(form.options.onPopulationError){$scope.getCallback(form.options.onPopulationError)(form,data,status);}
else{alert("Loading select items failed(Options: '"+String(form.options)+"\nError: "+status);}});}
else if(form.options.httpPost){var finalOptions=$scope.getOptions(form.options,search);return $http.post(finalOptions.httpPost.url,finalOptions.httpPost.parameter).then(function(_data){$scope.finalizeTitleMap(form,_data.data,finalOptions);},function(data,status){if(form.options.onPopulationError){$scope.getCallback(form.options.onPopulationError)(form,data,status);}
else{alert("Loading select items failed (URL: '"+String(finalOptions.httpPost.url)+"' Parameter: "+String(finalOptions.httpPost.parameter)+"\nError: "+status);}});}
else if(form.options.httpGet){var finalOptions=$scope.getOptions(form.options,search);return $http.get(finalOptions.httpGet.url,finalOptions.httpGet.parameter).then(function(data){$scope.finalizeTitleMap(form,data.data,finalOptions);},function(data,status){if(form.options.onPopulationError){$scope.getCallback(form.options.onPopulationError)(form,data,status);}
else{alert("Loading select items failed (URL: '"+String(finalOptions.httpGet.url)+"\nError: "+status);}});}
else{if($scope.insideModel&&$scope.select_model.selected===undefined){$scope.select_model.selected=$scope.find_in_titleMap($scope.insideModel);}}};$scope.find_in_titleMap=function(value){for(i=0;i<$scope.form.titleMap.length;i++){if($scope.form.titleMap[i].value==value){return{"item":$scope.form.titleMap[i],"index":i};}}};$scope.uiMultiSelectInitInternalModel=function(supplied_model)
{$scope.externalModel=supplied_model;$scope.internalModel=[];if($scope.form.titleMap){if(supplied_model!==undefined&&angular.isArray(supplied_model)){supplied_model.forEach(function(value){titleMap_item=$scope.find_in_titleMap(value);$scope.internalModel.push(titleMap_item.item);$scope.form.titleMap.splice(titleMap_item.index,1);})}}};}]);angular.module('schemaForm').filter('selectFilter',[function($filter){return function(inputArray,controller,localModel,strLocalModel){if(!angular.isDefined(inputArray)||!angular.isDefined(controller.form.options)||!angular.isDefined(controller.form.options.filter)||controller.form.options.filter==''){return inputArray;}
if(!controller.filteringInitialized){controller.initFiltering(localModel);}
var data=[];angular.forEach(inputArray,function(curr_item){if(controller.$eval(controller.form.options.filter,{item:curr_item})){data.push(curr_item);}
else if(localModel){if(controller.localModelType=="[object Array]"&&localModel.indexOf(curr_item.value)>-1){localModel.splice(localModel.indexOf(curr_item.value),1);}
else if(localModel==curr_item.value){localModel=null;}}});if(controller.localModelType=="[object Array]"&&!localModel){controller.$eval(strLocalModel+"=[]");}
return data;};}]);