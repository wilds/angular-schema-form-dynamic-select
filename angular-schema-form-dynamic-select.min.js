!function(e,t){"function"==typeof define&&define.amd?define(["angular-schema-form"],t):"object"==typeof exports?module.exports=t(require("angular-schema-form")):e.angularSchemaFormDynamicSelect=t(e.schemaForm)}(this,function(e){angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/strap/strapmultiselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}"\n     ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}">\n    <label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label>\n\n    <div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)">\n        <button type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$"\n                data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}"\n                data-html="1"\n                data-multiple="1"\n				data-placement="{{form.options.placement || \'bottom-left\'}}"\n				data-max-length="{{form.options.inlineMaxLength}}"\n                data-max-length-html="{{form.options.inlineMaxLengthHtml}}"\n                bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;"\n                bs-select>\n        </button>\n        <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span>\n    </div>\n</div>\n'),e.put("directives/decorators/bootstrap/strap/strapselect.html",'<div ng-controller="dynamicSelectController" class="form-group {{form.htmlClass}}"\n     ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}">\n    <label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label>\n\n    <div class="form-group {{form.fieldHtmlClass}}" ng-init="populateTitleMap(form)">\n        <button ng-if="(form.options.multiple == \'true\') || (form.options.multiple == true)"\n                type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$"\n                data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}"\n                data-html="1" data-multiple="1" data-max-length="{{form.options.inlineMaxLength}}"\n				data-placement="{{form.options.placement || \'bottom-left\'}}"\n                data-max-length-html="{{form.options.inlineMaxLengthHtml}}"\n                bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;"\n                bs-select>\n        </button>\n        <button ng-if="!((form.options.multiple == \'true\') || (form.options.multiple == true))"\n                type="button" class="btn btn-default" sf-changed="form" schema-validate="form" ng-model="$$value$$"\n                data-placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\')}}"\n                data-html="1"\n				data-placement="{{form.options.placement || \'bottom-left\'}}"\n                bs-options="item.value as item.name for item in form.titleMap | selectFilter:this:$$value$$:&quot;$$value$$&quot;"\n                bs-select>\n        </button>\n        <span class="help-block">{{ (hasError() && errorMessage(schemaError())) || form.description}} </span>\n    </div>\n</div>\n\n')}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/uiselect/uiselect.html",'<div ng-controller="dynamicSelectController" class="form-group"\n     ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"\n         ng-init="insideModel=$$value$$;">\n    <label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label>\n\n    <div class="form-group">\n        <ui-select ng-model="select_model.selected"\n                   ng-if="!(form.options.tagging||false)" theme="bootstrap" ng-disabled="form.disabled"\n                   on-select="$$value$$=$item.value" class="{{form.options.uiClass}}">\n            <ui-select-match\n                    placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">\n                {{select_model.selected.name}}\n            </ui-select-match>\n            <ui-select-choices refresh="populateTitleMap(form, $select.search)"\n                               refresh-delay="form.options.refreshDelay" group-by="form.options.groupBy"\n                               repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-bind-html="item.name | highlight: $select.search"></div>\n                <div ng-if="item.description">\n                    <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\'))+ \'</small>\'"></span>\n                </div>\n            </ui-select-choices>\n        </ui-select>\n        <ui-select ng-controller="dynamicSelectController" ng-model="select_model.selected"\n                   ng-if="(form.options.tagging||false) && !(form.options.groupBy || false)"\n                   tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel"\n                   tagging-tokens="form.options.taggingTokens"\n                   theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value"\n                   class="{{form.options.uiClass}}">\n            <ui-select-match\n                    placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">\n                {{select_model.selected.name}}&nbsp;\n                <small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small>\n            </ui-select-match>\n            <!--repeat code because tagging does not display properly under group by but is still useful -->\n            <ui-select-choices refresh="populateTitleMap(form, $select.search)"\n                               refresh-delay="form.options.refreshDelay"\n                               repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-if="item.isTag"\n                     ng-bind-html="\'<div>\' + (item.name   | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div>\n                <div ng-if="!item.isTag" ng-bind-html="item.name + item.isTag| highlight: $select.search"></div>\n                <div ng-if="item.description">\n                    <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span>\n                </div>\n            </ui-select-choices>\n        </ui-select>\n\n        <!--repeat code because tagging does not display properly under group by but is still useful -->\n\n        <ui-select ng-controller="dynamicSelectController" ng-model="select_model.selected"\n                   ng-if="(form.options.tagging||false) && (form.options.groupBy || false)"\n                   tagging="form.options.tagging||false" tagging-label="form.options.taggingLabel"\n                   tagging-tokens="form.options.taggingTokens"\n                   theme="bootstrap" ng-disabled="form.disabled" on-select="$$value$$=$item.value"\n                   class="{{form.options.uiClass}}">\n            <ui-select-match\n                    placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">\n                {{select_model.selected.name}}&nbsp;\n                <small>{{(select_model.selected.isTag===true ? form.options.taggingLabel : \'\')}}</small>\n            </ui-select-match>\n            <ui-select-choices group-by="form.options.groupBy"\n                               refresh="populateTitleMap(form, $select.search)"\n                               refresh-delay="form.options.refreshDelay"\n                               repeat="item in form.titleMap | propsFilter: {name: $select.search, description: (form.options.searchDescription===true ? $select.search : \'NOTSEARCHINGFORTHIS\') }">\n                <div ng-if="item.isTag"\n                     ng-bind-html="\'<div>\' + (item.name  | highlight: $select.search) + \' \' + form.options.taggingLabel + \'</div><div class=&quot;divider&quot;></div>\'"></div>\n                <div ng-if="!item.isTag" ng-bind-html="item.name + item.isTag| highlight: $select.search"></div>\n                <div ng-if="item.description">\n                    <span ng-bind-html="\'<small>\' + (\'\'+item.description | highlight: (form.options.searchDescriptions===true ? $select.search : \'NOTSEARCHINGFORTHIS\')) + \'</small>\'"></span>\n                </div>\n            </ui-select-choices>\n        </ui-select>\n\n        <input\n            type="hidden"\n            name="{{form.key.slice(-1)[0]}}"\n            toggle-single-model\n            sf-changed="form"\n            ng-model="insideModel"\n            schema-validate="form"/>\n\n        <span ng-if="form.feedback !== false"\n          class="form-control-feedback"\n          id="{{form.key.slice(-1)[0] + \'Status\'}}"\n          ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span>\n\n        <div class="help-block" sf-message="form.description"></div>\n\n    </div>\n</div>\n'),e.put("directives/decorators/bootstrap/uiselect/uiselectmultiple.html",'\n<div class="form-group" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess(), \'has-feedback\': form.feedback !== false}"\n        ng-controller="dynamicSelectController" ng-init="$$value$$=$$value$$||[];uiMultiSelectInitInternalModel($$value$$)">\n  <label class="control-label {{form.labelHtmlClass}}" ng-show="showTitle()">{{form.title}}</label>\n  <div class="form-group">\n    <ui-select multiple sortable-options="{{form.sortableOptions}}" ng-model="internalModel" theme="bootstrap"\n               on-select="$$value$$.push($item.value)" on-remove="$$value$$.splice($$value$$.indexOf($item.value), 1)"\n               class="{{form.options.uiClass}}">\n      <ui-select-match placeholder="{{form.placeholder || form.schema.placeholder || (\'placeholders.select\' | translate)}}">{{$item.name}}</ui-select-match>\n      <ui-select-choices repeat="item in form.titleMap | propsFilter: {name: $select.search}"\n         refresh="populateTitleMap(form, $select.search)"\n         refresh-delay="form.options.refreshDelay"\n         group-by="form.options.groupBy">\n        <div ng-bind-html="item.name | highlight: $select.search"></div>\n      </ui-select-choices>\n    </ui-select>\n    <span ng-if="form.feedback !== false"\n      class="form-control-feedback"\n      ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"></span>\n    <div class="help-block"\n      ng-show="(hasError() && errorMessage(schemaError())) || form.description"\n      ng-bind-html="(hasError() && errorMessage(schemaError())) || form.description"></div>\n  </div>\n</div>\n')}]),angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,t,o){var l=function(e){var t=[];return e.forEach(function(e){t.push({name:e,value:e})}),t},n=function(t,n,a){if("string"===n.type&&"enum"in n){var i=e.stdFormObj(t,n,a);return i.key=a.path,i.type="select",i.titleMap||(i.titleMap=l(n["enum"])),a.lookup[o.stringify(a.path)]=i,i}};e.defaults.string.unshift(n),t.addMapping("bootstrapDecorator","strapselect","directives/decorators/bootstrap/strap/strapselect.html"),t.addMapping("bootstrapDecorator","strapmultiselect","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.addMapping("bootstrapDecorator","strapselectdynamic","directives/decorators/bootstrap/strap/strapselect.html"),t.addMapping("bootstrapDecorator","strapmultiselectdynamic","directives/decorators/bootstrap/strap/strapmultiselect.html"),t.addMapping("bootstrapDecorator","uiselect","directives/decorators/bootstrap/uiselect/uiselect.html"),t.addMapping("bootstrapDecorator","uiselectmultiple","directives/decorators/bootstrap/uiselect/uiselectmultiple.html")}]).directive("toggleSingleModel",function(){return{require:"ngModel",restrict:"A",scope:{},replace:!0,controller:["$scope",function(e){e.$parent.$watch("select_model.selected",function(){void 0!=e.$parent.select_model.selected&&(e.$parent.insideModel=e.$parent.select_model.selected.value,e.$parent.ngModel.$setViewValue(e.$parent.select_model.selected.value))})}]}}).directive("multipleOn",function(){return{link:function(e,t,o){e.$watch(function(){return t.attr("multiple-on")},function(e){if("true"==e){var o=angular.element(t).scope().$$childTail;o.$isMultiple=!0,o.options.multiple=!0,o.$select.$element.addClass("select-multiple")}else angular.element(t).scope().$$childTail.$isMultiple=!1})}}}).filter("whereMulti",function(){return function(e,t,o){var l=[];return angular.isArray(o)&&void 0!==e?o.forEach(function(o){for(var n=0;n<e.length;n++)if(o==e[n][t]){l.push(e[n]);break}}):l=e,l}}).filter("propsFilter",function(){return function(e,t){var o=[];return angular.isArray(e)?e.forEach(function(e){for(var l=!1,n=Object.keys(t),a=0;a<n.length;a++){var i=n[a];if(e.hasOwnProperty(i)){var r=t[i].toLowerCase();if(0===e[i].toString().toLowerCase().indexOf(r)||-1!==e[i].toString().toLowerCase().indexOf(" "+r)){l=!0;break}}}l&&o.push(e)}):o=e,o}}),angular.module("schemaForm").controller("dynamicSelectController",["$scope","$http","$timeout",function(e,t,o){e.form.options||(e.form.options={}),e.select_model={},console.log("Setting options."+e.form.options.toString()),e.form.options.scope=e,e.triggerTitleMap=function(){console.log("listener triggered"),e.form.titleMap.push({value:"345890u340598u3405u9",name:"34095u3p4ouij"}),o(function(){e.form.titleMap.pop()})},e.initFiltering=function(t){e.form.options.filterTriggers&&e.form.options.filterTriggers.forEach(function(t){e.$parent.$watch(t,e.triggerTitleMap)}),e.localModelType=Object.prototype.toString.call(t),e.filteringInitialized=!0},e.finalizeTitleMap=function(t,o,l){if(t.titleMap=[],l&&"map"in l&&l.map){var n=l.map.nameProperty.length-1,a=l.map.separatorValue?l.map.separatorValue:" - ";o.forEach(function(e){if(e.value=e[l.map.valueProperty],"string"!=typeof l.map.nameProperty){var o="";for(var i in l.map.nameProperty)o+=e[l.map.nameProperty[i]],i!=n&&(o+=a);e.name=o}else e.name=e[l.map.nameProperty];t.titleMap.push(e)})}else o.forEach(function(e){"text"in e&&(e.name=e.text)}),t.titleMap=o;e.insideModel&&void 0===e.select_model.selected&&(e.select_model.selected=e.find_in_titleMap(e.insideModel).item),e.internalModel&&(console.log("Call uiMultiSelectInitInternalModel"),e.uiMultiSelectInitInternalModel(e.externalModel))},e.clone=function(t){if(null==t||"object"!=typeof t)return t;var o=t.constructor();for(var l in t)t[l]!=e&&t.hasOwnProperty(l)&&(o[l]=e.clone(t[l]));return o},e.getCallback=function(t){if("string"==typeof t){var o=e.$parent.evalExpr(t);if("function"==typeof o)return o;throw"A callback string must match name of a function in the parent scope"}if("function"==typeof t)return t;throw"A callback must either be a string matching the name of a function in the parent scope or a direct function reference"},e.getOptions=function(t,o){return t.httpPost&&t.httpPost.optionsCallback?(newOptionInstance=e.clone(t),e.getCallback(t.httpPost.optionsCallback)(newOptionInstance,o)):t.httpGet&&t.httpGet.optionsCallback?(newOptionInstance=e.clone(t),e.getCallback(t.httpGet.optionsCallback)(newOptionInstance,o)):t},e.test=function(e){e.titleMap.pop()},e.populateTitleMap=function(o,l){if(o.schema&&"enum"in o.schema)o.titleMap=[],o.schema["enum"].forEach(function(e){o.titleMap.push({value:e,name:e})});else if(o.options)if(o.options.callback)o.titleMap=e.getCallback(o.options.callback)(o.options,l),e.finalizeTitleMap(o,o.titleMap,o.options),console.log("callback items: ",o.titleMap);else{if(o.options.asyncCallback)return e.getCallback(o.options.asyncCallback)(o.options,l).then(function(t){t=t.data||t,e.finalizeTitleMap(o,t,o.options),console.log("asyncCallback items",o.titleMap)},function(e,t){alert("Loading select items failed(Options: '"+String(o.options)+"\nError: "+t)});if(o.options.httpPost){var n=e.getOptions(o.options,l);return t.post(n.httpPost.url,n.httpPost.parameter).then(function(t){e.finalizeTitleMap(o,t.data,n),console.log("httpPost items",o.titleMap)},function(e,t){alert("Loading select items failed (URL: '"+String(n.httpPost.url)+"' Parameter: "+String(n.httpPost.parameter)+"\nError: "+t)})}if(o.options.httpGet){var n=e.getOptions(o.options,l);return t.get(n.httpGet.url,n.httpGet.parameter).then(function(t){e.finalizeTitleMap(o,t.data,n),console.log("httpGet items",o.titleMap)},function(e,t){alert("Loading select items failed (URL: '"+String(n.httpGet.url)+"\nError: "+t)})}}else console.log("dynamicSelectController.populateTitleMap(key:"+o.key+") : No options set, needed for dynamic selects")},e.find_in_titleMap=function(t){for(i=0;i<e.form.titleMap.length;i++)if(e.form.titleMap[i].value==t)return{item:e.form.titleMap[i],index:i}},e.uiMultiSelectInitInternalModel=function(t){console.log("$scope.externalModel: Key: "+e.form.key.toString()+" Model: "+t.toString()),e.externalModel=t,e.internalModel=[],e.form.titleMap&&void 0!==t&&angular.isArray(t)&&t.forEach(function(t){titleMap_item=e.find_in_titleMap(t),e.internalModel.push(titleMap_item.item),e.form.titleMap.splice(titleMap_item.index,1)})}}]),angular.module("schemaForm").filter("selectFilter",[function(e){return function(e,t,o,l){if(!angular.isDefined(e)||!angular.isDefined(t.form.options)||!angular.isDefined(t.form.options.filter)||""==t.form.options.filter)return e;console.log("----- In filtering for "+t.form.key+"("+t.form.title+"), model value: "+JSON.stringify(o)+"----"),console.log("Filter:"+t.form.options.filter),t.filteringInitialized||(console.log("Initialize filter"),t.initFiltering(o));var n=[];return angular.forEach(e,function(e){t.$eval(t.form.options.filter,{item:e})?n.push(e):o&&("[object Array]"==t.localModelType&&o.indexOf(e.value)>-1?o.splice(o.indexOf(e.value),1):o==e.value&&(console.log("Setting model of type "+t.localModelType+"to null."),o=null))}),"[object Array]"!=t.localModelType||o||(console.log("Resetting model of type "+t.localModelType+" to []."),t.$eval(l+"=[]")),console.log("----- Exiting filter for "+t.form.title+"-----"),n}}])});
